/**
 * Copyright (c) 2016 Robert Fotino.
 *
 * A module that defines a Level object.
 */

define(function(require, exports, module) {
    var physics = require('physics');
    var Player = require('obj/Player');
    var Target = require('obj/Target');
    var Viewport = require('obj/Viewport');
    var StarField = require('obj/StarField');

    /**
     * Creates a game level with a name and function for getting an initial state.
     *
     * @param {String} name
     * @param {Function} stateFunc
     */
    function Level(name, stateFunc) {
        this.name = name;
        this._stateFunc = stateFunc;
        this.viewport = new Viewport();
    };

    /**
     * Initialize the state to an initial value generated by the state function.
     */
    Level.prototype.init = function() {
        // Initialize the state from the state function
        this._state = this._stateFunc();
        // Make sure there are certain properties like a player,
        // object array, etc
        if ('undefined' === typeof this._state.player) {
            this._state.player = new Player();
        }
        if ('undefined' === typeof this._state.objects) {
            this._state.objects = [];
        }
        // Grab all of the targets out of the game objects array
        this._state.targets = this._state.objects.filter(function(obj) {
            return 'target' === obj.type;
        });
        // Set up the star field
        this._state.starField = new StarField();
        // Reset the viewport and focus it on the player
        this.viewport.reset();
        this.viewport.focus(this._state.player);
    };

    /**
     * Updates the game state every frame
     */
    Level.prototype.update = function() {
        this._updateGameObjects();
        if (!this.complete()) {
            this._checkWinConditions();
        }
    };

    /**
     * Update each game object and do collision detection.
     */
    Level.prototype._updateGameObjects = function() {
        var player = this._state.player;
        // Add the player to the beginning of the game object list
        // if necessary
        if (player.alive) {
            this._state.objects.unshift(player);
        }
        // Update all game objects
        for (var i = 0; i < this._state.objects.length; i++) {
            var obj = this._state.objects[i];
            if (!this.complete() || obj.updateOnGameOver) {
                obj.update();
            }
        }
        // Do collision detection between all game objects
        for (var i = 0; i < this._state.objects.length; i++) {
            var objA = this._state.objects[i];
            for (var j = i + 1; j < this._state.objects.length; j++) {
                var objB = this._state.objects[j];
                // If the two objects intersect each other, call their collide
                // functions on each other
                if (physics.testIntersection(objA, objB)) {
                    objA.collide(objB);
                    objB.collide(objA);
                }
            }
        }
        // Add generated game objects and remove dead ones
        for (var i = this._state.objects.length - 1; 0 <= i; i--) {
            var obj = this._state.objects[i];
            var newTargets = obj.newObjects.filter(function(obj) {
                return 'target' === obj.type;
            });
            this._state.targets.push.apply(this._state.targets, newTargets);
            this._state.objects.push.apply(this._state.objects, obj.newObjects);
            obj.newObjects = [];
            if (!obj.alive) {
                this._state.objects.splice(i, 1);
            }
        }
        // Remove the player from the beginning of the game object list,
        // if it hasn't been removed already
        if (player.alive) {
            this._state.objects.shift();
        }
    };

    /**
     * Check the game state to see if the player won, lost, or neither.
     */
    Level.prototype._checkWinConditions = function() {
        var player = this._state.player;
        var targets = this._state.targets;
        var gameWon = true, gameLost = false;
        // Check if the player is dead
        if (!player.alive) {
            gameLost = true;
        }
        // If there are no win targets, the player should not win automatically
        if (0 === (targets.filter(function(t) { return t.win; })).length) {
            gameWon = false;
        }
        // Iterate over the targets, checking if they have been completed
        // and whether that signifies a win or lose condition
        for (var i = 0; i < targets.length; i++) {
            var target = targets[i];
            if (target.complete(player)) {
                if (target.lose) {
                    gameLost = true;
                }
            } else {
                if (target.win) {
                    gameWon = false;
                }
            }
        }
        // If the player won or lost, update the gameOver variable to
        // indicate this and show the game over screen
        if (gameLost) {
            this._state.gameOver = 'lose';
        } else if (gameWon) {
            this._state.gameOver = 'win';
        }
    };

    /**
     * Draw the game objects on screen.
     *
     * @param {CanvasRenderingContext2D} ctx
     */
    Level.prototype.draw = function(ctx) {
        var player = this._state.player;
        // Clear the canvas
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        // Update the graphics context transform for the viewport
        this.viewport.update(ctx);
        // Draw the stars
        this._state.starField.draw(ctx, this.viewport);
        // Draw the game objects
        for (var i = 0; i < this._state.objects.length; i++) {
            var obj = this._state.objects[i];
            ctx.save();
            ctx.translate(obj.pos.x, obj.pos.y);
            ctx.rotate(obj.pos.angular);
            obj.draw(ctx);
            ctx.restore();
        }
        // Draw the player if necessary
        if (player.alive) {
            ctx.save();
            ctx.translate(player.pos.x, player.pos.y);
            ctx.rotate(player.pos.angular);
            player.draw(ctx);
            ctx.restore();
        }
        // Draw win/lose screen if necessary
        if ('undefined' !== typeof this._state.gameOver) {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.strokeStyle = '#000';
            ctx.lineWidth = 3;
            ctx.lineJoin = 'bevel';
            ctx.font = 'bold 72px monospace';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            var text = '';
            if ('win' === this._state.gameOver) {
                ctx.fillStyle = '#0f0';
                text = 'YOU WIN!';
            } else if ('lose' === this._state.gameOver) {
                ctx.fillStyle = '#f00';
                text = 'GAME OVER';
            }
            ctx.strokeText(text, ctx.canvas.width / 2, ctx.canvas.height / 2);
            ctx.fillText(text, ctx.canvas.width / 2, ctx.canvas.height / 2);
        }
    };

    /**
     * Gets the state of the game world to pass to the worker thread.
     *
     * @return {Object}
     */
    Level.prototype.getWorld = function() {
        var getObj = function(obj) { return obj.getObj(); };
        var isObj = function(obj) { return obj && ('object' === typeof obj); };
        return {
            player: this._state.player.getObj(),
            objects: this._state.objects.map(getObj).filter(isObj)
        };
    };

    /**
     * Updates the state of the game world due to changes made in the worker
     * thread.
     *
     * @param {Object} world
     */
    Level.prototype.updateWorld = function(world) {
        var player = this._state.player;
        player.thrustPower = world.player.thrustPower;
        player.thrust = world.player.thrust;
        player.turnPower = world.player.turnPower;
        player.accel.angular = world.player.accel.angular;
        player.equipped = world.player.equipped;
        player.fired = world.player.fired;
    };

    /**
     * Returns true if the game is over.
     *
     * @return {Boolean}
     */
    Level.prototype.complete = function() {
        return 'undefined' !== typeof this._state &&
            'undefined' !== typeof this._state.gameOver;
    };

    /**
     * Returns true if the level is complete and nothing more is being
     * animated.
     *
     * @return {Boolean}
     */
    Level.prototype.doneUpdating = function() {
        return this.complete() &&
            0 === this._state.objects.filter(function(obj) {
                return obj.updateOnGameOver;
            }).length;
    };

    /**
     * Returns a bounding box containing the level objects.
     *
     * @return {Rectangle}
     */
    Level.prototype.bounds = function() {
        var minX = Infinity,
        minY = Infinity,
        maxX = -Infinity,
        maxY = -Infinity,
        padding = 20;
        this._state.objects.push(this._state.player);
        for (var i = 0; i < this._state.objects.length; i++) {
            var obj = this._state.objects[i];
            var bounds = obj.bounds();
            minX = Math.min(minX, bounds.x);
            minY = Math.min(minY, bounds.y);
            maxX = Math.max(maxX, bounds.x + bounds.width);
            maxY = Math.max(maxY, bounds.y + bounds.height);
        }
        this._state.objects.pop();
        return {
            x: minX - padding,
            y: minY - padding,
            width: maxX - minX + (padding * 2),
            height: maxY - minY + (padding * 2)
        };
    };

    module.exports = Level;
});
